@base <http://environment.data.admin.ch/ubd/28/pipeline/> .
@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

_:inputFile a p:Variable;
  p:name "inputFile";
  p:value "input/UBD0028.Daten_de.csv.gz".

<cube> a p:Pipeline;
  p:variables [
    p:variable _:inputFile,
    [ a p:Variable;
      p:name "metadataFile";
      p:value "input/UBD0028.cube.meta.json"
    ], [ a p:Variable;
      p:name "outputFile";
      p:value "output/UBD0028.cube.nt"
    ]
  ];
  p:steps [
    p:stepList ( <readFile> <decompress> <parse> <filterNotCsvw> <convertDecimal> <serialize> <writeFile> )
  ].

<stations> a p:Pipeline;
  p:variables [
    p:variable _:inputFile,
    [ a p:Variable;
      p:name "metadataFile";
      p:value "input/UBD0028.stations.meta.json"
    ], [ a p:Variable;
      p:name "outputFile";
      p:value "output/UBD0028.stations.nt"
    ]
  ];
  p:steps [
    p:stepList ( <readFile> <decompress> <parse> <filterNotCsvw> <serialize> <unique> <writeFile> )
  ].

<readFile> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("inputFile"^^p:VariableName).

<decompress> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:zlib#createGunzip>
  ].

<parse> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats#csvw.parse>
  ];
  code:arguments ( <parseMetadata> ).

<filterNotCsvw> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#filter>
 ];
 code:arguments ( """quad => {
    if (quad.predicate.value.startsWith('http://www.w3.org/ns/csvw#')) {
	 return false
	}

	if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' && quad.object.value.startsWith('http://www.w3.org/ns/csvw#')) {
	 return false
	}

	return true
	}"""^^code:EcmaScript ).

<convertDecimal> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#map>
 ];
 code:arguments ( """quad => {
   const rdf = require('rdf-ext')

   if (quad.object.datatype && quad.object.datatype.value === 'http://www.w3.org/2001/XMLSchema#decimal') {
     return rdf.quad(quad.subject, quad.predicate, rdf.literal(quad.object.value.replace(',', '.'), rdf.namedNode('http://www.w3.org/2001/XMLSchema#decimal')))
   }

   return quad
 }"""^^code:EcmaScript ).

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats#ntriples.serialize>
  ].

<writeFile> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("outputFile"^^p:VariableName).

<parseMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList ( <readMetadata> <parseMetadataStep> )
  ].

<readMetadata> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("metadataFile"^^p:VariableName).

<parseMetadataStep> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats#jsonld.parse>
  ].

<unique>  a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-shell>;
  ];
  code:arguments ("sort" "-u").
